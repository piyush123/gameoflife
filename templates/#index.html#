<!DOCTYPE html>
<html>
<head>
    <title>Conway's Game of Life</title>
    <style>
        /* Styling the grid */
        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, 20px);
            grid-auto-rows: 20px;
            grid-gap: 1px;
            background-color: #ccc;
            width: max-content;
        }
        
        .cell {
            background-color: white;
        }
        
        /* Styling the buttons */
        .controls {
            margin-top: 10px;
        }
        
        .controls button {
            margin-right: 5px;
        }
    </style>
</head>
<body>
    <h1>Conway's Game of Life</h1>
    <div class="grid"></div>
    <div class="controls">
        <button onclick="start()">Start</button>
        <button onclick="stop()">Stop</button>
        <button onclick="clearGrid()">Clear</button>
        <button onclick="randomize()">Randomize</button>
    </div>
    
    <script>
        // Constants
        const rows = 30;
        const columns = 50;
        const speed = 200; // Delay in milliseconds
        
        // Variables
        let grid = [];
        let intervalId;
        
        // Initialize the grid
        function initializeGrid() {
            const container = document.querySelector('.grid');
            container.style.gridTemplateColumns = `repeat(${columns}, 20px)`;
            
            for (let i = 0; i < rows; i++) {
                grid[i] = [];
                
                for (let j = 0; j < columns; j++) {
                    const cell = document.createElement('div');
                    cell.classList.add('cell');
                    cell.addEventListener('click', () => toggleCellState(i, j));
                    container.appendChild(cell);
                    grid[i][j] = 0;
                }
            }
        }
        
        // Toggle the state of a cell
        function toggleCellState(row, column) {
            grid[row][column] = grid[row][column] === 0 ? 1 : 0;
            const cell = document.querySelector(`.grid > div:nth-child(${(row * columns) + column + 1})`);
            cell.style.backgroundColor = grid[row][column] === 0 ? 'white' : 'black';
        }
        
        // Start the game
        function start() {
            intervalId = setInterval(updateGrid, speed);
        }
        
        // Stop the game
        function stop() {
            clearInterval(intervalId);
        }
        
        // Clear the grid
        function clearGrid() {
            for (let i = 0; i < rows; i++) {
                for (let j = 0; j < columns; j++) {
                    grid[i][j] = 0;
                    const cell = document.querySelector(`.grid > div:nth-child(${(i * columns) + j + 1})`);
                    cell.style.backgroundColor = 'white';
                }
            }
        }
        
        // Randomize the grid
        function randomize() {
            clearGrid();
            
            for (let i = 0; i < rows; i++) {
                for (let j = 0; j < columns; j++) {
                    grid[i][j] = Math.round(Math.random());
                    const cell = document.querySelector(`.grid > div:nth-child(${(i * columns) + j + 1})`);
                    cell.style.backgroundColor = grid[i][j] === 0 ? 'white'
		}
	    }



</script>